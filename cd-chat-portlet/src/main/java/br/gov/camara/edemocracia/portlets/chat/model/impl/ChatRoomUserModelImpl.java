package br.gov.camara.edemocracia.portlets.chat.model.impl;

import br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUser;
import br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUserModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ChatRoomUser service. Represents a row in the &quot;CDChat_ChatRoomUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChatRoomUserImpl}.
 * </p>
 *
 * @author Ricardo Lima
 * @see ChatRoomUserImpl
 * @see br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUser
 * @see br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUserModel
 * @generated
 */
public class ChatRoomUserModelImpl extends BaseModelImpl<ChatRoomUser>
    implements ChatRoomUserModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a chat room user model instance should use the {@link br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUser} interface instead.
     */
    public static final String TABLE_NAME = "CDChat_ChatRoomUser";
    public static final Object[][] TABLE_COLUMNS = {
            { "chatUserId", Types.BIGINT },
            { "chatRoomId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "userImgId", Types.BIGINT },
            { "userUF", Types.BIGINT },
            { "userEmail", Types.VARCHAR },
            { "banned", Types.BOOLEAN },
            { "userType", Types.INTEGER },
            { "joinedTS", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table CDChat_ChatRoomUser (chatUserId LONG not null primary key,chatRoomId LONG,userId LONG,userName VARCHAR(75) null,userImgId LONG,userUF LONG,userEmail VARCHAR(75) null,banned BOOLEAN,userType INTEGER,joinedTS DATE null)";
    public static final String TABLE_SQL_DROP = "drop table CDChat_ChatRoomUser";
    public static final String ORDER_BY_JPQL = " ORDER BY chatRoomUser.userType DESC, chatRoomUser.userName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CDChat_ChatRoomUser.userType DESC, CDChat_ChatRoomUser.userName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUser"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUser"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUser"),
            true);
    public static long CHATROOMID_COLUMN_BITMASK = 1L;
    public static long USEREMAIL_COLUMN_BITMASK = 2L;
    public static long USERID_COLUMN_BITMASK = 4L;
    public static long USERNAME_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUser"));
    private static ClassLoader _classLoader = ChatRoomUser.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            ChatRoomUser.class
        };
    private long _chatUserId;
    private String _chatUserUuid;
    private long _chatRoomId;
    private long _originalChatRoomId;
    private boolean _setOriginalChatRoomId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private String _userName;
    private String _originalUserName;
    private long _userImgId;
    private long _userUF;
    private String _userEmail;
    private String _originalUserEmail;
    private boolean _banned;
    private int _userType;
    private Date _joinedTS;
    private long _columnBitmask;
    private ChatRoomUser _escapedModelProxy;

    public ChatRoomUserModelImpl() {
    }

    public long getPrimaryKey() {
        return _chatUserId;
    }

    public void setPrimaryKey(long primaryKey) {
        setChatUserId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_chatUserId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return ChatRoomUser.class;
    }

    public String getModelClassName() {
        return ChatRoomUser.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("chatUserId", getChatUserId());
        attributes.put("chatRoomId", getChatRoomId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("userImgId", getUserImgId());
        attributes.put("userUF", getUserUF());
        attributes.put("userEmail", getUserEmail());
        attributes.put("banned", getBanned());
        attributes.put("userType", getUserType());
        attributes.put("joinedTS", getJoinedTS());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long chatUserId = (Long) attributes.get("chatUserId");

        if (chatUserId != null) {
            setChatUserId(chatUserId);
        }

        Long chatRoomId = (Long) attributes.get("chatRoomId");

        if (chatRoomId != null) {
            setChatRoomId(chatRoomId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Long userImgId = (Long) attributes.get("userImgId");

        if (userImgId != null) {
            setUserImgId(userImgId);
        }

        Long userUF = (Long) attributes.get("userUF");

        if (userUF != null) {
            setUserUF(userUF);
        }

        String userEmail = (String) attributes.get("userEmail");

        if (userEmail != null) {
            setUserEmail(userEmail);
        }

        Boolean banned = (Boolean) attributes.get("banned");

        if (banned != null) {
            setBanned(banned);
        }

        Integer userType = (Integer) attributes.get("userType");

        if (userType != null) {
            setUserType(userType);
        }

        Date joinedTS = (Date) attributes.get("joinedTS");

        if (joinedTS != null) {
            setJoinedTS(joinedTS);
        }
    }

    public long getChatUserId() {
        return _chatUserId;
    }

    public void setChatUserId(long chatUserId) {
        _chatUserId = chatUserId;
    }

    public String getChatUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getChatUserId(), "uuid", _chatUserUuid);
    }

    public void setChatUserUuid(String chatUserUuid) {
        _chatUserUuid = chatUserUuid;
    }

    public long getChatRoomId() {
        return _chatRoomId;
    }

    public void setChatRoomId(long chatRoomId) {
        _columnBitmask |= CHATROOMID_COLUMN_BITMASK;

        if (!_setOriginalChatRoomId) {
            _setOriginalChatRoomId = true;

            _originalChatRoomId = _chatRoomId;
        }

        _chatRoomId = chatRoomId;
    }

    public long getOriginalChatRoomId() {
        return _originalChatRoomId;
    }

    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    public void setUserName(String userName) {
        _columnBitmask = -1L;

        if (_originalUserName == null) {
            _originalUserName = _userName;
        }

        _userName = userName;
    }

    public String getOriginalUserName() {
        return GetterUtil.getString(_originalUserName);
    }

    public long getUserImgId() {
        return _userImgId;
    }

    public void setUserImgId(long userImgId) {
        _userImgId = userImgId;
    }

    public long getUserUF() {
        return _userUF;
    }

    public void setUserUF(long userUF) {
        _userUF = userUF;
    }

    public String getUserEmail() {
        if (_userEmail == null) {
            return StringPool.BLANK;
        } else {
            return _userEmail;
        }
    }

    public void setUserEmail(String userEmail) {
        _columnBitmask |= USEREMAIL_COLUMN_BITMASK;

        if (_originalUserEmail == null) {
            _originalUserEmail = _userEmail;
        }

        _userEmail = userEmail;
    }

    public String getOriginalUserEmail() {
        return GetterUtil.getString(_originalUserEmail);
    }

    public boolean getBanned() {
        return _banned;
    }

    public boolean isBanned() {
        return _banned;
    }

    public void setBanned(boolean banned) {
        _banned = banned;
    }

    public int getUserType() {
        return _userType;
    }

    public void setUserType(int userType) {
        _columnBitmask = -1L;

        _userType = userType;
    }

    public Date getJoinedTS() {
        return _joinedTS;
    }

    public void setJoinedTS(Date joinedTS) {
        _joinedTS = joinedTS;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ChatRoomUser.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ChatRoomUser toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (ChatRoomUser) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        ChatRoomUserImpl chatRoomUserImpl = new ChatRoomUserImpl();

        chatRoomUserImpl.setChatUserId(getChatUserId());
        chatRoomUserImpl.setChatRoomId(getChatRoomId());
        chatRoomUserImpl.setUserId(getUserId());
        chatRoomUserImpl.setUserName(getUserName());
        chatRoomUserImpl.setUserImgId(getUserImgId());
        chatRoomUserImpl.setUserUF(getUserUF());
        chatRoomUserImpl.setUserEmail(getUserEmail());
        chatRoomUserImpl.setBanned(getBanned());
        chatRoomUserImpl.setUserType(getUserType());
        chatRoomUserImpl.setJoinedTS(getJoinedTS());

        chatRoomUserImpl.resetOriginalValues();

        return chatRoomUserImpl;
    }

    public int compareTo(ChatRoomUser chatRoomUser) {
        int value = 0;

        if (getUserType() < chatRoomUser.getUserType()) {
            value = -1;
        } else if (getUserType() > chatRoomUser.getUserType()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        value = getUserName().compareTo(chatRoomUser.getUserName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        ChatRoomUser chatRoomUser = null;

        try {
            chatRoomUser = (ChatRoomUser) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = chatRoomUser.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ChatRoomUserModelImpl chatRoomUserModelImpl = this;

        chatRoomUserModelImpl._originalChatRoomId = chatRoomUserModelImpl._chatRoomId;

        chatRoomUserModelImpl._setOriginalChatRoomId = false;

        chatRoomUserModelImpl._originalUserId = chatRoomUserModelImpl._userId;

        chatRoomUserModelImpl._setOriginalUserId = false;

        chatRoomUserModelImpl._originalUserName = chatRoomUserModelImpl._userName;

        chatRoomUserModelImpl._originalUserEmail = chatRoomUserModelImpl._userEmail;

        chatRoomUserModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ChatRoomUser> toCacheModel() {
        ChatRoomUserCacheModel chatRoomUserCacheModel = new ChatRoomUserCacheModel();

        chatRoomUserCacheModel.chatUserId = getChatUserId();

        chatRoomUserCacheModel.chatRoomId = getChatRoomId();

        chatRoomUserCacheModel.userId = getUserId();

        chatRoomUserCacheModel.userName = getUserName();

        String userName = chatRoomUserCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            chatRoomUserCacheModel.userName = null;
        }

        chatRoomUserCacheModel.userImgId = getUserImgId();

        chatRoomUserCacheModel.userUF = getUserUF();

        chatRoomUserCacheModel.userEmail = getUserEmail();

        String userEmail = chatRoomUserCacheModel.userEmail;

        if ((userEmail != null) && (userEmail.length() == 0)) {
            chatRoomUserCacheModel.userEmail = null;
        }

        chatRoomUserCacheModel.banned = getBanned();

        chatRoomUserCacheModel.userType = getUserType();

        Date joinedTS = getJoinedTS();

        if (joinedTS != null) {
            chatRoomUserCacheModel.joinedTS = joinedTS.getTime();
        } else {
            chatRoomUserCacheModel.joinedTS = Long.MIN_VALUE;
        }

        return chatRoomUserCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{chatUserId=");
        sb.append(getChatUserId());
        sb.append(", chatRoomId=");
        sb.append(getChatRoomId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", userImgId=");
        sb.append(getUserImgId());
        sb.append(", userUF=");
        sb.append(getUserUF());
        sb.append(", userEmail=");
        sb.append(getUserEmail());
        sb.append(", banned=");
        sb.append(getBanned());
        sb.append(", userType=");
        sb.append(getUserType());
        sb.append(", joinedTS=");
        sb.append(getJoinedTS());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("br.gov.camara.edemocracia.portlets.chat.model.ChatRoomUser");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>chatUserId</column-name><column-value><![CDATA[");
        sb.append(getChatUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>chatRoomId</column-name><column-value><![CDATA[");
        sb.append(getChatRoomId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userImgId</column-name><column-value><![CDATA[");
        sb.append(getUserImgId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userUF</column-name><column-value><![CDATA[");
        sb.append(getUserUF());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userEmail</column-name><column-value><![CDATA[");
        sb.append(getUserEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>banned</column-name><column-value><![CDATA[");
        sb.append(getBanned());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userType</column-name><column-value><![CDATA[");
        sb.append(getUserType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>joinedTS</column-name><column-value><![CDATA[");
        sb.append(getJoinedTS());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
