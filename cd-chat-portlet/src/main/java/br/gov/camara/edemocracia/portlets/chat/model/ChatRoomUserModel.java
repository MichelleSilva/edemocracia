/**
 * Copyright (c) 2009-2014 Câmara dos Deputados. Todos os direitos reservados.
 *
 * e-Democracia é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro
 * dos termos da Licença Pública Geral Menor GNU como publicada pela Fundação do 
 * Software Livre (FSF); na versão 2.1 da Licença, ou (na sua opinião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */
package br.gov.camara.edemocracia.portlets.chat.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the ChatRoomUser service. Represents a row in the &quot;CDChat_ChatRoomUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link br.gov.camara.edemocracia.portlets.chat.model.impl.ChatRoomUserModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link br.gov.camara.edemocracia.portlets.chat.model.impl.ChatRoomUserImpl}.
 * </p>
 *
 * @author Ricardo Lima
 * @see ChatRoomUser
 * @see br.gov.camara.edemocracia.portlets.chat.model.impl.ChatRoomUserImpl
 * @see br.gov.camara.edemocracia.portlets.chat.model.impl.ChatRoomUserModelImpl
 * @generated
 */
public interface ChatRoomUserModel extends BaseModel<ChatRoomUser> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a chat room user model instance should use the {@link ChatRoomUser} interface instead.
     */

    /**
     * Returns the primary key of this chat room user.
     *
     * @return the primary key of this chat room user
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this chat room user.
     *
     * @param primaryKey the primary key of this chat room user
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the chat user ID of this chat room user.
     *
     * @return the chat user ID of this chat room user
     */
    public long getChatUserId();

    /**
     * Sets the chat user ID of this chat room user.
     *
     * @param chatUserId the chat user ID of this chat room user
     */
    public void setChatUserId(long chatUserId);

    /**
     * Returns the chat user uuid of this chat room user.
     *
     * @return the chat user uuid of this chat room user
     * @throws SystemException if a system exception occurred
     */
    public String getChatUserUuid() throws SystemException;

    /**
     * Sets the chat user uuid of this chat room user.
     *
     * @param chatUserUuid the chat user uuid of this chat room user
     */
    public void setChatUserUuid(String chatUserUuid);

    /**
     * Returns the chat room ID of this chat room user.
     *
     * @return the chat room ID of this chat room user
     */
    public long getChatRoomId();

    /**
     * Sets the chat room ID of this chat room user.
     *
     * @param chatRoomId the chat room ID of this chat room user
     */
    public void setChatRoomId(long chatRoomId);

    /**
     * Returns the user ID of this chat room user.
     *
     * @return the user ID of this chat room user
     */
    public long getUserId();

    /**
     * Sets the user ID of this chat room user.
     *
     * @param userId the user ID of this chat room user
     */
    public void setUserId(long userId);

    /**
     * Returns the user uuid of this chat room user.
     *
     * @return the user uuid of this chat room user
     * @throws SystemException if a system exception occurred
     */
    public String getUserUuid() throws SystemException;

    /**
     * Sets the user uuid of this chat room user.
     *
     * @param userUuid the user uuid of this chat room user
     */
    public void setUserUuid(String userUuid);

    /**
     * Returns the user name of this chat room user.
     *
     * @return the user name of this chat room user
     */
    @AutoEscape
    public String getUserName();

    /**
     * Sets the user name of this chat room user.
     *
     * @param userName the user name of this chat room user
     */
    public void setUserName(String userName);

    /**
     * Returns the user img ID of this chat room user.
     *
     * @return the user img ID of this chat room user
     */
    public long getUserImgId();

    /**
     * Sets the user img ID of this chat room user.
     *
     * @param userImgId the user img ID of this chat room user
     */
    public void setUserImgId(long userImgId);

    /**
     * Returns the user u f of this chat room user.
     *
     * @return the user u f of this chat room user
     */
    public long getUserUF();

    /**
     * Sets the user u f of this chat room user.
     *
     * @param userUF the user u f of this chat room user
     */
    public void setUserUF(long userUF);

    /**
     * Returns the user email of this chat room user.
     *
     * @return the user email of this chat room user
     */
    @AutoEscape
    public String getUserEmail();

    /**
     * Sets the user email of this chat room user.
     *
     * @param userEmail the user email of this chat room user
     */
    public void setUserEmail(String userEmail);

    /**
     * Returns the banned of this chat room user.
     *
     * @return the banned of this chat room user
     */
    public boolean getBanned();

    /**
     * Returns <code>true</code> if this chat room user is banned.
     *
     * @return <code>true</code> if this chat room user is banned; <code>false</code> otherwise
     */
    public boolean isBanned();

    /**
     * Sets whether this chat room user is banned.
     *
     * @param banned the banned of this chat room user
     */
    public void setBanned(boolean banned);

    /**
     * Returns the user type of this chat room user.
     *
     * @return the user type of this chat room user
     */
    public int getUserType();

    /**
     * Sets the user type of this chat room user.
     *
     * @param userType the user type of this chat room user
     */
    public void setUserType(int userType);

    /**
     * Returns the joined t s of this chat room user.
     *
     * @return the joined t s of this chat room user
     */
    public Date getJoinedTS();

    /**
     * Sets the joined t s of this chat room user.
     *
     * @param joinedTS the joined t s of this chat room user
     */
    public void setJoinedTS(Date joinedTS);

    public boolean isNew();

    public void setNew(boolean n);

    public boolean isCachedModel();

    public void setCachedModel(boolean cachedModel);

    public boolean isEscapedModel();

    public Serializable getPrimaryKeyObj();

    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    public ExpandoBridge getExpandoBridge();

    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    public Object clone();

    public int compareTo(ChatRoomUser chatRoomUser);

    public int hashCode();

    public CacheModel<ChatRoomUser> toCacheModel();

    public ChatRoomUser toEscapedModel();

    public String toString();

    public String toXmlString();
}
