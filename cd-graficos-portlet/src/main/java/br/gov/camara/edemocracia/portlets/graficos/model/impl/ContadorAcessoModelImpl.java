/**
 * Copyright (c) 2009-2014 Câmara dos Deputados. Todos os direitos reservados.
 *
 * e-Democracia é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro
 * dos termos da Licença Pública Geral Menor GNU como publicada pela Fundação do 
 * Software Livre (FSF); na versão 2.1 da Licença, ou (na sua opinião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */
package br.gov.camara.edemocracia.portlets.graficos.model.impl;

import br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcesso;
import br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcessoModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ContadorAcesso service. Represents a row in the &quot;Graficos_ContadorAcesso&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcessoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContadorAcessoImpl}.
 * </p>
 *
 * @author Robson Miranda
 * @see ContadorAcessoImpl
 * @see br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcesso
 * @see br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcessoModel
 * @generated
 */
public class ContadorAcessoModelImpl extends BaseModelImpl<ContadorAcesso>
    implements ContadorAcessoModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contador acesso model instance should use the {@link br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcesso} interface instead.
     */
    public static final String TABLE_NAME = "Graficos_ContadorAcesso";
    public static final Object[][] TABLE_COLUMNS = {
            { "contadorId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "data_", Types.TIMESTAMP },
            { "dataAtualizacao", Types.TIMESTAMP },
            { "cache", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table Graficos_ContadorAcesso (contadorId LONG not null primary key,companyId LONG,data_ DATE null,dataAtualizacao DATE null,cache TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table Graficos_ContadorAcesso";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcesso"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcesso"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcesso"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long DATA_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcesso"));
    private static ClassLoader _classLoader = ContadorAcesso.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            ContadorAcesso.class
        };
    private long _contadorId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private Date _data;
    private Date _originalData;
    private Date _dataAtualizacao;
    private String _cache;
    private long _columnBitmask;
    private ContadorAcesso _escapedModelProxy;

    public ContadorAcessoModelImpl() {
    }

    public long getPrimaryKey() {
        return _contadorId;
    }

    public void setPrimaryKey(long primaryKey) {
        setContadorId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_contadorId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return ContadorAcesso.class;
    }

    public String getModelClassName() {
        return ContadorAcesso.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("contadorId", getContadorId());
        attributes.put("companyId", getCompanyId());
        attributes.put("data", getData());
        attributes.put("dataAtualizacao", getDataAtualizacao());
        attributes.put("cache", getCache());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long contadorId = (Long) attributes.get("contadorId");

        if (contadorId != null) {
            setContadorId(contadorId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Date data = (Date) attributes.get("data");

        if (data != null) {
            setData(data);
        }

        Date dataAtualizacao = (Date) attributes.get("dataAtualizacao");

        if (dataAtualizacao != null) {
            setDataAtualizacao(dataAtualizacao);
        }

        String cache = (String) attributes.get("cache");

        if (cache != null) {
            setCache(cache);
        }
    }

    public long getContadorId() {
        return _contadorId;
    }

    public void setContadorId(long contadorId) {
        _contadorId = contadorId;
    }

    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    public Date getData() {
        return _data;
    }

    public void setData(Date data) {
        _columnBitmask |= DATA_COLUMN_BITMASK;

        if (_originalData == null) {
            _originalData = _data;
        }

        _data = data;
    }

    public Date getOriginalData() {
        return _originalData;
    }

    public Date getDataAtualizacao() {
        return _dataAtualizacao;
    }

    public void setDataAtualizacao(Date dataAtualizacao) {
        _dataAtualizacao = dataAtualizacao;
    }

    public String getCache() {
        if (_cache == null) {
            return StringPool.BLANK;
        } else {
            return _cache;
        }
    }

    public void setCache(String cache) {
        _cache = cache;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            ContadorAcesso.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ContadorAcesso toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (ContadorAcesso) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        ContadorAcessoImpl contadorAcessoImpl = new ContadorAcessoImpl();

        contadorAcessoImpl.setContadorId(getContadorId());
        contadorAcessoImpl.setCompanyId(getCompanyId());
        contadorAcessoImpl.setData(getData());
        contadorAcessoImpl.setDataAtualizacao(getDataAtualizacao());
        contadorAcessoImpl.setCache(getCache());

        contadorAcessoImpl.resetOriginalValues();

        return contadorAcessoImpl;
    }

    public int compareTo(ContadorAcesso contadorAcesso) {
        long primaryKey = contadorAcesso.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        ContadorAcesso contadorAcesso = null;

        try {
            contadorAcesso = (ContadorAcesso) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = contadorAcesso.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContadorAcessoModelImpl contadorAcessoModelImpl = this;

        contadorAcessoModelImpl._originalCompanyId = contadorAcessoModelImpl._companyId;

        contadorAcessoModelImpl._setOriginalCompanyId = false;

        contadorAcessoModelImpl._originalData = contadorAcessoModelImpl._data;

        contadorAcessoModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ContadorAcesso> toCacheModel() {
        ContadorAcessoCacheModel contadorAcessoCacheModel = new ContadorAcessoCacheModel();

        contadorAcessoCacheModel.contadorId = getContadorId();

        contadorAcessoCacheModel.companyId = getCompanyId();

        Date data = getData();

        if (data != null) {
            contadorAcessoCacheModel.data = data.getTime();
        } else {
            contadorAcessoCacheModel.data = Long.MIN_VALUE;
        }

        Date dataAtualizacao = getDataAtualizacao();

        if (dataAtualizacao != null) {
            contadorAcessoCacheModel.dataAtualizacao = dataAtualizacao.getTime();
        } else {
            contadorAcessoCacheModel.dataAtualizacao = Long.MIN_VALUE;
        }

        contadorAcessoCacheModel.cache = getCache();

        String cache = contadorAcessoCacheModel.cache;

        if ((cache != null) && (cache.length() == 0)) {
            contadorAcessoCacheModel.cache = null;
        }

        return contadorAcessoCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{contadorId=");
        sb.append(getContadorId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", data=");
        sb.append(getData());
        sb.append(", dataAtualizacao=");
        sb.append(getDataAtualizacao());
        sb.append(", cache=");
        sb.append(getCache());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append(
            "br.gov.camara.edemocracia.portlets.graficos.model.ContadorAcesso");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>contadorId</column-name><column-value><![CDATA[");
        sb.append(getContadorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>data</column-name><column-value><![CDATA[");
        sb.append(getData());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataAtualizacao</column-name><column-value><![CDATA[");
        sb.append(getDataAtualizacao());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cache</column-name><column-value><![CDATA[");
        sb.append(getCache());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
