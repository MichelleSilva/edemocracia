/**
 * Copyright (c) 2009-2014 Câmara dos Deputados. Todos os direitos reservados.
 *
 * e-Democracia é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro
 * dos termos da Licença Pública Geral Menor GNU como publicada pela Fundação do 
 * Software Livre (FSF); na versão 2.1 da Licença, ou (na sua opinião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */
package br.gov.camara.edemocracia.portlets.priorizacao.model.impl;

import br.gov.camara.edemocracia.portlets.priorizacao.model.Proposta;
import br.gov.camara.edemocracia.portlets.priorizacao.model.PropostaModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Proposta service. Represents a row in the &quot;PR_Proposta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.gov.camara.edemocracia.portlets.priorizacao.model.PropostaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PropostaImpl}.
 * </p>
 *
 * @author robson
 * @see PropostaImpl
 * @see br.gov.camara.edemocracia.portlets.priorizacao.model.Proposta
 * @see br.gov.camara.edemocracia.portlets.priorizacao.model.PropostaModel
 * @generated
 */
public class PropostaModelImpl extends BaseModelImpl<Proposta>
    implements PropostaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a proposta model instance should use the {@link br.gov.camara.edemocracia.portlets.priorizacao.model.Proposta} interface instead.
     */
    public static final String TABLE_NAME = "PR_Proposta";
    public static final Object[][] TABLE_COLUMNS = {
            { "propostaId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "eixoId", Types.BIGINT },
            { "identificador", Types.VARCHAR },
            { "ementa", Types.VARCHAR },
            { "texto", Types.VARCHAR },
            { "threadId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table PR_Proposta (propostaId LONG not null primary key,companyId LONG,groupId LONG,eixoId LONG,identificador VARCHAR(75) null,ementa VARCHAR(3900) null,texto TEXT null,threadId LONG)";
    public static final String TABLE_SQL_DROP = "drop table PR_Proposta";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.br.gov.camara.edemocracia.portlets.priorizacao.model.Proposta"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.br.gov.camara.edemocracia.portlets.priorizacao.model.Proposta"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.br.gov.camara.edemocracia.portlets.priorizacao.model.Proposta"),
            true);
    public static long EIXOID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long IDENTIFICADOR_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.br.gov.camara.edemocracia.portlets.priorizacao.model.Proposta"));
    private static ClassLoader _classLoader = Proposta.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Proposta.class
        };
    private long _propostaId;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _eixoId;
    private long _originalEixoId;
    private boolean _setOriginalEixoId;
    private String _identificador;
    private String _originalIdentificador;
    private String _ementa;
    private String _texto;
    private long _threadId;
    private long _columnBitmask;
    private Proposta _escapedModelProxy;

    public PropostaModelImpl() {
    }

    public long getPrimaryKey() {
        return _propostaId;
    }

    public void setPrimaryKey(long primaryKey) {
        setPropostaId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_propostaId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Proposta.class;
    }

    public String getModelClassName() {
        return Proposta.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("propostaId", getPropostaId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("eixoId", getEixoId());
        attributes.put("identificador", getIdentificador());
        attributes.put("ementa", getEmenta());
        attributes.put("texto", getTexto());
        attributes.put("threadId", getThreadId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long propostaId = (Long) attributes.get("propostaId");

        if (propostaId != null) {
            setPropostaId(propostaId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long eixoId = (Long) attributes.get("eixoId");

        if (eixoId != null) {
            setEixoId(eixoId);
        }

        String identificador = (String) attributes.get("identificador");

        if (identificador != null) {
            setIdentificador(identificador);
        }

        String ementa = (String) attributes.get("ementa");

        if (ementa != null) {
            setEmenta(ementa);
        }

        String texto = (String) attributes.get("texto");

        if (texto != null) {
            setTexto(texto);
        }

        Long threadId = (Long) attributes.get("threadId");

        if (threadId != null) {
            setThreadId(threadId);
        }
    }

    public long getPropostaId() {
        return _propostaId;
    }

    public void setPropostaId(long propostaId) {
        _propostaId = propostaId;
    }

    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public long getEixoId() {
        return _eixoId;
    }

    public void setEixoId(long eixoId) {
        _columnBitmask |= EIXOID_COLUMN_BITMASK;

        if (!_setOriginalEixoId) {
            _setOriginalEixoId = true;

            _originalEixoId = _eixoId;
        }

        _eixoId = eixoId;
    }

    public long getOriginalEixoId() {
        return _originalEixoId;
    }

    public String getIdentificador() {
        if (_identificador == null) {
            return StringPool.BLANK;
        } else {
            return _identificador;
        }
    }

    public void setIdentificador(String identificador) {
        _columnBitmask |= IDENTIFICADOR_COLUMN_BITMASK;

        if (_originalIdentificador == null) {
            _originalIdentificador = _identificador;
        }

        _identificador = identificador;
    }

    public String getOriginalIdentificador() {
        return GetterUtil.getString(_originalIdentificador);
    }

    public String getEmenta() {
        if (_ementa == null) {
            return StringPool.BLANK;
        } else {
            return _ementa;
        }
    }

    public void setEmenta(String ementa) {
        _ementa = ementa;
    }

    public String getTexto() {
        if (_texto == null) {
            return StringPool.BLANK;
        } else {
            return _texto;
        }
    }

    public void setTexto(String texto) {
        _texto = texto;
    }

    public long getThreadId() {
        return _threadId;
    }

    public void setThreadId(long threadId) {
        _threadId = threadId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Proposta.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Proposta toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Proposta) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        PropostaImpl propostaImpl = new PropostaImpl();

        propostaImpl.setPropostaId(getPropostaId());
        propostaImpl.setCompanyId(getCompanyId());
        propostaImpl.setGroupId(getGroupId());
        propostaImpl.setEixoId(getEixoId());
        propostaImpl.setIdentificador(getIdentificador());
        propostaImpl.setEmenta(getEmenta());
        propostaImpl.setTexto(getTexto());
        propostaImpl.setThreadId(getThreadId());

        propostaImpl.resetOriginalValues();

        return propostaImpl;
    }

    public int compareTo(Proposta proposta) {
        long primaryKey = proposta.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Proposta proposta = null;

        try {
            proposta = (Proposta) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = proposta.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PropostaModelImpl propostaModelImpl = this;

        propostaModelImpl._originalGroupId = propostaModelImpl._groupId;

        propostaModelImpl._setOriginalGroupId = false;

        propostaModelImpl._originalEixoId = propostaModelImpl._eixoId;

        propostaModelImpl._setOriginalEixoId = false;

        propostaModelImpl._originalIdentificador = propostaModelImpl._identificador;

        propostaModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Proposta> toCacheModel() {
        PropostaCacheModel propostaCacheModel = new PropostaCacheModel();

        propostaCacheModel.propostaId = getPropostaId();

        propostaCacheModel.companyId = getCompanyId();

        propostaCacheModel.groupId = getGroupId();

        propostaCacheModel.eixoId = getEixoId();

        propostaCacheModel.identificador = getIdentificador();

        String identificador = propostaCacheModel.identificador;

        if ((identificador != null) && (identificador.length() == 0)) {
            propostaCacheModel.identificador = null;
        }

        propostaCacheModel.ementa = getEmenta();

        String ementa = propostaCacheModel.ementa;

        if ((ementa != null) && (ementa.length() == 0)) {
            propostaCacheModel.ementa = null;
        }

        propostaCacheModel.texto = getTexto();

        String texto = propostaCacheModel.texto;

        if ((texto != null) && (texto.length() == 0)) {
            propostaCacheModel.texto = null;
        }

        propostaCacheModel.threadId = getThreadId();

        return propostaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{propostaId=");
        sb.append(getPropostaId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", eixoId=");
        sb.append(getEixoId());
        sb.append(", identificador=");
        sb.append(getIdentificador());
        sb.append(", ementa=");
        sb.append(getEmenta());
        sb.append(", texto=");
        sb.append(getTexto());
        sb.append(", threadId=");
        sb.append(getThreadId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append(
            "br.gov.camara.edemocracia.portlets.priorizacao.model.Proposta");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>propostaId</column-name><column-value><![CDATA[");
        sb.append(getPropostaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eixoId</column-name><column-value><![CDATA[");
        sb.append(getEixoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>identificador</column-name><column-value><![CDATA[");
        sb.append(getIdentificador());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ementa</column-name><column-value><![CDATA[");
        sb.append(getEmenta());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>texto</column-name><column-value><![CDATA[");
        sb.append(getTexto());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>threadId</column-name><column-value><![CDATA[");
        sb.append(getThreadId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
